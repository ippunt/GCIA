Craft, read, manipulate, combine and write packets and pcaps. CLI access or import for complex tasks into python.
Notes: Some things need quotes IP addresses is one of those things!Must be root to send packets
1. Help and using tool for help info
2. LaBrea.py  python script that will utilize all IPs on subnet and play with TCP connections. 
3. Assigning variables
4.Sending and receiving
5. Checksum manipulation  , read packet from pcap
6. Utilize in python
7. iptables You want scapy to be able to send appropriate traffic for LaBrea
8. Create a list     , Open packets right in wireshark 

1.
which scapy; Where is our binary. Entering Scapy will tell you which version it is.
Help- >>>ls(); show you protocols. >>>ls(ether); shows fields that can be used in ether. >>> ls(IP); show you the IP fields. >>> ls(TCP); TCP fields
p1 = IP(); empty instance of the class
>>>p1; shows you mods or  >>>ls(p1); shows all

2. 
LaBrea.py script runs with scapy to listen on all arps and use all unused IP.
https://github.com/dhoelzer/ShowMeThePackets/blob/master/Scapy/LaBrea.py
sudo iptables -A OUTPUT -p tcp --tcp-flags RST RST -j DROP

3.
p1.src="1.1.1.1"
p1.id=666
p1=IP(src="1.1.1.1", id=666, dst= "2.2.2.2")
Stacking
p2=Ether(dst="ff:ff:ff:ff:ff:ff", src="aa:bb:cc:dd:ee:ff")/ARP(hwsrc="aa:bb:cc:dd:ee:ff",hwdst="ff:ff:ff:ff:ff:ff")/"I Love Turles!"

4.
S = Send | R = receive
lsc(); see what it does
sr- SRL3, sr1 SRL3 1 answer, srp - SRL2, srp1 - SRL2 1 answer
send - Send stuff at layer 3
sendp - send stuff at layer 2

5.
packet=rdpcap("altered.pcap"); delpacket[0][IP].chksum; del packet[0][TCP].chksum.
  When scapy deleted Chksum it will automatically recalculate and build a proper chksum
  
6. 
import sys
from scapy.all import *

7. 
iptables -A OUTPUT -p tcp --tcp-flags RST RST -j drop
iptables -A OUTPUT -p ICMP --icmp-type port-unreachable RST RST -j drop

8.
packets=[]
packets.append(request); append 1 packet
packets.append(reply); 
wireshark(packets); 
