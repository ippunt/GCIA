1. Client to Server C-Hello, support cipher suite, TLS version 32 bit string nonce. Nonce will be used for session key
2. Server to Client S-Hello, TLS version, selected cipher, certificate, 32 bit nonce. 
3. Client validates fingerpring found in cert, uses nonce with its own to generate premaster secret and send to server
    Both client and server use pre-master secret to generate master secret, which derive session keys to encrypt traffic. Assymetric for sig, Sym for data.
  
4. C<--->S Encrypted Comms. TLS is a 3 way handshake

TLS 1.3 disabled many algos decryption relied on. AUg 2018 fast open begin to be leveraged. 
  Fast-Open subsequent connections rely on previously negotiated key material, coupled with DNS over TLS hard to detect anything.


SNI- Server name indicator within TLS handshake may let you know who the host is visiting at the IP address.
  Allows server to host multiple secure webpages. 
  Without SNI server wouldn't know which certificate to serve.
  RTT-0 requires this key to be preshared in DNS. First packet may be the get
  RTT-0 may be subject to some replay attacks
  
How could you encrypt the SNI? Servers public key is in DNS record.

Analysis-
 1.2   https://tls.ulfheim.net
 1.3  https://tls13.ulfheim.net


TLS 1.2 Full Handshake
1. C hello
2. S hello
3. C key exchange
4. S Key Exhcnage 
5. http get
6. http response

TLS 1.3
1. C hello, key share
2. S hello, key share
3. http get
4. http response
